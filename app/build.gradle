apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.braincorp.petrolwatcher"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 4
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            def properties = new Properties()
            file("release.properties").withInputStream { properties.load(it) }
            keyPassword properties.getProperty("key.password")
            storePassword properties.getProperty("store.password")
            keyAlias properties.getProperty("key.alias")
            storeFile file(properties.getProperty("store.file"))
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        dev {
            minifyEnabled false
        }
    }

    flavorDimensions "mode"
    productFlavors {
        beta {
            dimension "mode"
            versionNameSuffix "-beta4"
        }

        prod {
            dimension "mode"
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        debug.java.srcDirs += 'src/debug/kotlin'
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'

        debug {
            manifest.srcFile 'src/androidTest/AndroidManifest.xml'
        }
        main { assets.srcDirs = ['src/main/assets', 'src/androidTest/assets/'] }
    }
}

jacoco {
    toolVersion = '0.8.1'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task deleteOldReports(type: Delete) {
    delete "$project.buildDir/reports/"
}

// Run this task for test coverage reports
task jacocoTestReport(type: JacocoReport,
        dependsOn: ['deleteOldReports', 'testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                      '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

def build_param = "${build}"

if (build_param != "dev") {
    //exclude production build
    android.variantFilter { variant ->
        if (variant.buildType.name == 'dev') {
            variant.setIgnore(true)
        }
    }
} else {
    //exclude all except production build
    android.variantFilter { variant ->
        if (variant.buildType.name != 'dev') {
            variant.setIgnore(true)
        }
    }
}

dependencies {
    // region INSTRUMENTED TEST LIBRARIES
    // libs folder
    androidTestImplementation fileTree(include: ['*.aar'], dir: 'libs')

    // region Android support
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    // endregion

    // Kappuccino
    androidTestImplementation 'br.com.concretesolutions:kappuccino:1.2.1'

    // Mockito
    androidTestImplementation 'org.mockito:mockito-android:2.15.0'

    // Mock web server
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    // endregion

    // region STANDARD LIBRARIES
    // libs folder
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // region Android support
    implementation "com.android.support:appcompat-v7:$support_library_version"
    implementation "com.android.support:cardview-v7:$support_library_version"
    implementation "com.android.support:customtabs:$support_library_version"
    implementation "com.android.support:design:$support_library_version"
    implementation "com.android.support:animated-vector-drawable:$support_library_version"
    implementation "com.android.support:exifinterface:$support_library_version"
    implementation "com.android.support:support-media-compat:$support_library_version"
    implementation "com.android.support:support-v4:$support_library_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    // endregion

    // Circle image view
    implementation 'de.hdodenhof:circleimageview:2.2.0'

    // Facebook login
    implementation 'com.facebook.android:facebook-login:4.28.0'

    // region Firebase
    implementation 'com.google.firebase:firebase-core:16.0.4'
    implementation 'com.google.firebase:firebase-auth:16.0.5'
    implementation 'com.google.firebase:firebase-database:16.0.3'
    implementation 'com.google.firebase:firebase-storage:16.0.3'
    // endregion

    // Google sign in
    implementation 'com.google.android.gms:play-services-auth:16.0.1'

    // region Google Maps
    implementation "com.google.android.gms:play-services-maps:$google_maps_version"
    implementation 'com.google.maps.android:android-maps-utils:0.5'
    implementation "com.google.android.gms:play-services-places:$google_maps_version"
    implementation "com.google.android.gms:play-services-location:$google_maps_version"
    // endregion

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // region Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    // endregion

    // Universal image loader
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    // endregion

    // region UNIT TEST LIBRARIES
    // JUnit
    testImplementation 'junit:junit:4.12'

    // Mockito
    testImplementation 'org.mockito:mockito-core:2.21.0'
    // endregion
}

apply plugin: 'com.google.gms.google-services'
